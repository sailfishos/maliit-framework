From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pekka Vuorela <pekka.vuorela@jollamobile.com>
Date: Mon, 4 May 2015 17:20:52 +0300
Subject: [PATCH] Use mce for keyboard state. Fixes JB#48910

---
 CMakeLists.txt               | 12 +++++--
 src/mimhwkeyboardtracker.cpp | 70 ++++++++++++++++++++++++++++++++++--
 src/mimhwkeyboardtracker_p.h | 17 +++++++++
 3 files changed, 95 insertions(+), 4 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4ce3f9e..0120de8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,6 +18,7 @@ option(enable-lipstick "Compile with Lipstick integration support" ON)
 
 option(enable-hwkeyboard "Enable support for the hardware keyboard" ON)
 option(enable-dbus-activation "Enable dbus activation support for maliit-server" OFF)
+option(enable-mce "Enable MCE support for hardware keyboard tracking" ON)
 
 # Install paths
 include(GNUInstallDirs)
@@ -212,8 +213,9 @@ if(enable-hwkeyboard)
     list(APPEND PLUGINS_SOURCES
          src/mimhwkeyboardtracker.cpp
          src/mimhwkeyboardtracker_p.h)
-    find_package(UDev REQUIRED)
-    list(APPEND PLUGINS_LIBRARIES UDev::UDev)
+    # TODO: separate mce and udev
+    #find_package(UDev REQUIRED)
+    #list(APPEND PLUGINS_LIBRARIES UDev::UDev)
 else()
     list(APPEND PLUGINS_SOURCES src/mimhwkeyboardtracker_stub.cpp)
 endif()
@@ -227,6 +229,12 @@ set_target_properties(maliit-plugins PROPERTIES SOVERSION ${PROJECT_VERSION_MAJO
         VERSION ${PROJECT_VERSION}
         EXPORT_NAME Maliit::Plugins)
 
+if(enable-mce)
+    pkg_check_modules(MCE REQUIRED IMPORTED_TARGET mce)
+    # target_link_libraries(maliit-plugins PRIVATE PkgConfig::MCE)
+    add_definitions(-DHAVE_MCE)
+endif()
+
 if(enable-glib)
     find_package(GLib2)
     find_package(GIO)
diff --git a/src/mimhwkeyboardtracker.cpp b/src/mimhwkeyboardtracker.cpp
index 7da8702..f965160 100644
--- a/src/mimhwkeyboardtracker.cpp
+++ b/src/mimhwkeyboardtracker.cpp
@@ -16,9 +16,21 @@
 // This file is based on mkeyboardstatetracker.cpp from libmeegotouch
 
 #include <QSocketNotifier>
+#include <QDBusConnection>
+#include <QDBusMessage>
+#include <QDBusPendingCall>
+#include <QDBusPendingReply>
+#include <QDebug>
 
+#ifdef HAVE_UDEV
 #include <libudev.h>
 #include <linux/input.h>
+#endif
+
+#ifdef HAVE_MCE
+#include <mce/dbus-names.h> // from mce-dev
+#include <mce/mode-names.h> // from mce-dev
+#endif
 
 #include "mimhwkeyboardtracker.h"
 #include "mimhwkeyboardtracker_p.h"
@@ -28,17 +40,38 @@
 #define TEST_BIT(bit, array) (array[(bit) / 8] & (1 << (bit) % 8))
 
 MImHwKeyboardTrackerPrivate::MImHwKeyboardTrackerPrivate(MImHwKeyboardTracker *q_ptr) :
+#ifdef HAVE_UDEV
     evdevTabletModePending(-1),
     evdevTabletMode(0),
+#endif
     present(false)
 {
+
+#ifdef HAVE_MCE
+    present = true; // includes external, always true
+    keyboardOpened = false;
+
+    QDBusMessage message = QDBusMessage::createMethodCall(MCE_SERVICE, MCE_REQUEST_PATH, MCE_REQUEST_IF,
+                                                          MCE_HARDWARE_KEYBOARD_STATE_GET);
+    QDBusPendingCall call = QDBusConnection::systemBus().asyncCall(message);
+    QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(call);
+    connect(watcher, SIGNAL(finished(QDBusPendingCallWatcher*)),
+            this, SLOT(handleMceKeyboardReply(QDBusPendingCallWatcher*)));
+
+    QDBusConnection::systemBus().connect(MCE_SERVICE, MCE_SIGNAL_PATH, MCE_SIGNAL_IF,
+                                         MCE_HARDWARE_KEYBOARD_STATE_SIG,
+                                         this, SLOT(mceKeyboardStateChanged(QString)));
+
+#else
+    detectEvdev();
+#endif
+
     Q_UNUSED(q_ptr);
     QObject::connect(this, SIGNAL(stateChanged()),
                      q_ptr, SIGNAL(stateChanged()));
-
-    detectEvdev();
 }
 
+#ifdef HAVE_UDEV
 void MImHwKeyboardTrackerPrivate::detectEvdev()
 {
     // Use udev to enumerate all input devices, using evdev on each device to
@@ -158,6 +191,35 @@ void MImHwKeyboardTrackerPrivate::tryEvdevDevice(const char *device)
 
     evdevTabletMode = TEST_BIT(SW_TABLET_MODE, swState);
 }
+#endif
+
+#ifdef HAVE_MCE
+void MImHwKeyboardTrackerPrivate::mceKeyboardStateChanged(const QString &value)
+{
+   bool available = value == QLatin1String("available");
+   if (available != keyboardOpened) {
+       keyboardOpened = available;
+       Q_EMIT stateChanged();
+   }
+}
+
+void MImHwKeyboardTrackerPrivate::handleMceKeyboardReply(QDBusPendingCallWatcher *call)
+{
+    call->deleteLater();
+    QDBusPendingReply<> reply = *call;
+    if (reply.isError()) {
+        qWarning() << "Unable to get MCE keyboard state";
+    } else {
+        QList<QVariant> arguments = reply.reply().arguments();
+        if (arguments.size() != 1) {
+            qWarning() << "Invalid return MCE value";
+            return;
+        }
+        QString value = arguments.at(0).toString();
+        mceKeyboardStateChanged(value);
+    }
+}
+#endif
 
 MImHwKeyboardTrackerPrivate::~MImHwKeyboardTrackerPrivate()
 {
@@ -188,6 +250,9 @@ bool MImHwKeyboardTracker::isOpen() const
         return false;
     }
 
+#ifdef HAVE_MCE
+    return d->keyboardOpened;
+#else
     // If we found a talet mode switch, we report that the hardware keyboard
     // is available when the system is not in tablet mode (switch closed),
     // and is not available otherwise (switch open).
@@ -195,4 +260,5 @@ bool MImHwKeyboardTracker::isOpen() const
         return !d->evdevTabletMode;
 
     return false;
+#endif
 }
diff --git a/src/mimhwkeyboardtracker_p.h b/src/mimhwkeyboardtracker_p.h
index 0c14462..1889581 100644
--- a/src/mimhwkeyboardtracker_p.h
+++ b/src/mimhwkeyboardtracker_p.h
@@ -17,6 +17,10 @@
 #define MIMHWKEYBOARDTRACKER_P_H
 
 #include <QFile>
+#include <QScopedPointer>
+#include <QDBusPendingCallWatcher>
+
+#include "mimsettings.h"
 
 class MImHwKeyboardTracker;
 
@@ -29,17 +33,30 @@ public:
     explicit MImHwKeyboardTrackerPrivate(MImHwKeyboardTracker *q_ptr);
     ~MImHwKeyboardTrackerPrivate();
 
+#ifdef HAVE_UDEV
     void detectEvdev();
     void tryEvdevDevice(const char *device);
 
     QFile *evdevFile;
     int evdevTabletModePending;
     bool evdevTabletMode;
+#endif
+
+#ifdef HAVE_MCE
+    bool keyboardOpened;
+#endif
 
     bool present;
 
 public Q_SLOTS:
+#ifdef HAVE_UDEV
     void evdevEvent();
+#endif
+
+#ifdef HAVE_MCE
+    void mceKeyboardStateChanged(const QString &value);
+    void handleMceKeyboardReply(QDBusPendingCallWatcher*);
+#endif
 
 Q_SIGNALS:
     void stateChanged();
