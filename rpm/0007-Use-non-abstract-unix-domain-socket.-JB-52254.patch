From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simo Piiroinen <simo.piiroinen@jolla.com>
Date: Wed, 31 Mar 2021 14:49:33 +0300
Subject: [PATCH] Use non-abstract unix domain socket. JB#52254

Abstract unix socket paths are problematic from firejail
sandboxing point of view as bind and connect must happen
from the same net namespace. As maliit use must in practice
be allowed to all applications, this makes it impossible to
detach applications from the global net namespace.

Switching to regular file based unix sockets solves the net
namespace problem and allows use of firejail black/whitelist
mechanisms for controlling access to maliit socket.

Using an extra directory level for socket makes it possible
to grant bind permission without simultaneously allowing
removal / replacement of other unrelated unix sockets.

Signed-off-by: Simo Piiroinen <simo.piiroinen@jolla.com>
---
 connection/serverdbusaddress.cpp | 39 ++++++++++++++++++++++++++------
 1 file changed, 32 insertions(+), 7 deletions(-)

diff --git a/connection/serverdbusaddress.cpp b/connection/serverdbusaddress.cpp
index 19f46d4..31f960e 100644
--- a/connection/serverdbusaddress.cpp
+++ b/connection/serverdbusaddress.cpp
@@ -2,6 +2,7 @@
  *
  * Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
  * All rights reserved.
+ * Copyright (c) 2021 Jolla Ltd.
  *
  *
  * This library is free software; you can redistribute it and/or
@@ -17,9 +18,13 @@
 #include <QDBusConnection>
 #include <QDBusServer>
 #include <QStandardPaths>
+#include <QDir>
 
 #include <cstdlib>
 
+#include <sys/stat.h>
+#include <unistd.h>
+
 namespace {
     const char * const MaliitServerName = "org.maliit.server";
     const char * const MaliitServerObjectPath = "/org/maliit/server/address";
@@ -61,13 +66,33 @@ DynamicAddress::DynamicAddress()
 
 QDBusServer* DynamicAddress::connect()
 {
-    auto runtimeDir = QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation);
-    auto dbusAddress = QLatin1String("unix:path=%1/maliit-server").arg(runtimeDir);
-
-    QDBusServer *server = new QDBusServer(dbusAddress);
-
-    publisher.reset(new AddressPublisher(server->address()));
-
+    QDBusServer *server = nullptr;
+    char *runDir = nullptr;
+    char *socketDir = nullptr;
+    char *socketFile = nullptr;
+    const char *env = getenv("XDG_RUNTIME_DIR");
+    if (env && *env == '/' && QDir(QString::fromUtf8(env)).exists())
+        runDir = strdup(env);
+    else if (asprintf(&runDir, "/run/user/%d", static_cast<int>(getuid())) < 0)
+        runDir = nullptr;
+    if (!runDir) {
+        qWarning("Could not determine XDG_RUNTIME_DIR");
+    } else if (asprintf(&socketDir, "%s/maliit-server", runDir) < 0) {
+        socketDir = nullptr;
+    } else if (asprintf(&socketFile, "%s/dbus-socket", socketDir) < 0) {
+        socketFile = nullptr;
+    } else if (mkdir(socketDir, 0770) == -1 && errno != EEXIST) {
+        qWarning("Failed to create %s: %s", socketDir, strerror(errno));
+    } else if (unlink(socketFile) == -1 && errno != ENOENT) {
+        qWarning("Failed to remove %s: %s", socketFile, strerror(errno));
+    } else {
+        QString dbusAddress(QStringLiteral("unix:path=%1").arg(socketFile));
+        server = new QDBusServer(dbusAddress);
+        publisher.reset(new AddressPublisher(server->address()));
+    }
+    free(socketFile);
+    free(socketDir);
+    free(runDir);
     return server;
 }
 
